<?php

namespace Api\Controller\v1;

use Auth\Entity\Client;
use Auth\Entity\ClientsUsersGroups;
use Auth\Entity\User;
use Doctrine\ORM\EntityManager;
use OAuth2\Request;
use RestApi\Controller\ApiController;
use Zend\View\Model\JsonModel;

/**
 * Class UserController
 * @package Api\Controller\v1
 */
class UserController extends ApiController {
    /**
     * @var EntityManager
     */
    private $entityManager;

    /**
     * UserController constructor.
     * @param EntityManager $entityManager
     */
    public function __construct(EntityManager $entityManager) {
        $this->entityManager = $entityManager;
    }

    /**
     * @param mixed $id
     * @return JsonModel
     */
    public function get($id): JsonModel {
        $response = null;
        if ($this->oauth()->auth()) {
            $tokenData = $this->oauth()->getService()->getServer()->getAccessTokenData(Request::createFromGlobals());
            if ($id == $tokenData['user_id']) {
                $client = $this->entityManager->getRepository(Client::class)->find($tokenData['client_id']);
                $user = $this->entityManager->getRepository(User::class)->find($id);
                $clientUserGroup = $this->entityManager->getRepository(ClientsUsersGroups::class)->findOneBy(['user' => $user, 'client' => $client]);

                $response = [
                    'code' => 1,
                    'content' => [
                        'id' => $user->getId(),
                        'name' => $user->getLogin(),
                        'email' => $user->getEmail(),
                        'group' => [
                            'id' => $clientUserGroup->getGroup()->getId(),
                            'name' => $clientUserGroup->getGroup()->getName(),
                        ],
                    ],
                ];

                $this->apiResponse = $response;
            } else {
                $this->apiResponse = [
                    'code' => 0,
                    'content' => [
                        'message' => 'Not allowed',
                    ],
                ];
            }
        }
        return $this->createResponse();
    }

    /**
     * @param mixed $id
     * @param mixed $data
     * @return JsonModel
     */
    public function update($id, $data): JsonModel {
        $response = null;
        if ($this->oauth()->auth()) {
            var_dump($data);die;
            $response = [
                'ok' => 'autoryzacja udana',
            ];

            $this->apiResponse['message'] = $response;
        }
        return $this->createResponse();
    }

    /**
     * @param mixed $id
     * @return mixed
     */
    public function delete($id) {
        return parent::delete($id); // TODO: Change the autogenerated stub
    }
}
